/** @license undo-redo

undo-redo, a undo redo stack data structure.

Copyright © 2020-2021 Subendra Kumar Sharma. All rights reserved. (jobs.sharma.subendra.kr@gmail.com)

This file is part of undo-redo.

undo-redo is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

undo-redo is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with undo-redo.  If not, see <https://www.gnu.org/licenses/>.

Written by Subendra Kumar Sharma.

*/
!function(t,e){"object"==typeof exports&&"object"==typeof module?module.exports=e():"function"==typeof define&&define.amd?define([],e):"object"==typeof exports?exports.UndoRedo=e():t.UndoRedo=e()}(window,(function(){return function(t){var e={};function i(n){if(e[n])return e[n].exports;var s=e[n]={i:n,l:!1,exports:{}};return t[n].call(s.exports,s,s.exports,i),s.l=!0,s.exports}return i.m=t,i.c=e,i.d=function(t,e,n){i.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:n})},i.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},i.t=function(t,e){if(1&e&&(t=i(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var n=Object.create(null);if(i.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var s in t)i.d(n,s,function(e){return t[e]}.bind(null,s));return n},i.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return i.d(e,"a",e),e},i.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},i.p="assets",i(i.s=0)}([function(t,e,i){"use strict";i.r(e);e.default=
/** @license undo-redo

undo-redo, a undo redo stack data structure.

Copyright © 2020-2021 Subendra Kumar Sharma. All rights reserved. (jobs.sharma.subendra.kr@gmail.com)

This file is part of undo-redo.

undo-redo is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

undo-redo is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with undo-redo.  If not, see <https://www.gnu.org/licenses/>.

Written by Subendra Kumar Sharma.

*/
class{constructor(t){this.HEAD=void 0,this.TAIL=void 0,this.CURR=void 0,this.size=(null==t?void 0:t.size)||50,this.length=0}constructNode(t){return{next:void 0,prev:void 0,data:t}}undo(){if(this.CURR!==this.TAIL)return this.CURR=this.CURR.prev,this.CURR.data}isUndoAvailable(){return!(this.CURR===this.TAIL)}redo(){if(this.CURR!==this.HEAD)return this.CURR=this.CURR.next,this.CURR.data}isRedoAvailable(){return!(this.CURR===this.HEAD)}push(t){const e=this.constructNode(t);if(void 0===this.CURR)this.CURR=e,this.HEAD=e,this.TAIL=e,this.length++,this.checkLength();else if(this.CURR===this.HEAD)this.HEAD=e,this.HEAD.prev=this.CURR,this.CURR.next=this.HEAD,this.CURR=this.HEAD,this.length++,this.checkLength();else{let t=this.CURR.next;e.prev=this.CURR,this.CURR.next=e,this.CURR=this.CURR.next,this.HEAD=this.CURR;let i=0;for(;void 0!==t;){const e=t;t=t.next,e.next=void 0,e.prev=void 0,i++}this.length-=i,this.length++}return t}checkLength(){this.length>this.size&&(this.TAIL=this.TAIL.next,this.length--)}getCurrent(){var t;return null===(t=this.CURR)||void 0===t?void 0:t.data}setCurrent(t){if(this.CURR)return this.CURR.data=t,this.CURR.data}getData(){let t=this.TAIL;const e=new Array(this.length);let i=0;for(;void 0!==t;)e[i++]=t.data,t=t.next;return e}reset(){this.HEAD=void 0,this.TAIL=void 0,this.CURR=void 0,this.length=0}}}])}));